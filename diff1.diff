diff --git a/Game_of_Life/Game_of_Life.vcxproj b/Game_of_Life/Game_of_Life.vcxproj
index 5859ae7..5bdf7a7 100644
--- a/Game_of_Life/Game_of_Life.vcxproj
+++ b/Game_of_Life/Game_of_Life.vcxproj
@@ -78,7 +78,7 @@
       <SDLCheck>true</SDLCheck>
       <AdditionalIncludeDirectories>E:\Libraries\glm-0.9.9-a2\include;E:\Libraries\glew-2.1.0\include;E:\Libraries\Boost\boost_1_66_0;E:\Libraries\TGUI-x86\include;E:\Libraries\SFML-x86\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
-      <PreprocessorDefinitions>GLEW_STATIC;SFML_STATIC;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PreprocessorDefinitions>BOOST_CONFIG_SUPPRESS_OUTDATED_MESSAGE;GLEW_STATIC;SFML_STATIC;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
     </ClCompile>
     <Link>
       <AdditionalLibraryDirectories>E:\Libraries\glm-0.9.9-a2\glm\Release;E:\Libraries\glew-2.1.0\lib\Release\Win32;E:\Libraries\Boost\boost_1_66_0\stage\lib;E:\Libraries\TGUI-x86\lib;E:\Libraries\SFML-x86\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
@@ -94,7 +94,7 @@
       <Optimization>Disabled</Optimization>
       <SDLCheck>true</SDLCheck>
       <AdditionalIncludeDirectories>E:\Libraries\glm-0.9.9-a2-x64\include;E:\Libraries\glew-2.1.0\include;E:\Libraries\Boost\boost_1_66_0;E:\Libraries\TGUI-x64\include;E:\Libraries\SFML-x64\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
-      <PreprocessorDefinitions>GLEW_STATIC;SFML_STATIC;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PreprocessorDefinitions>BOOST_CONFIG_SUPPRESS_OUTDATED_MESSAGE;GLEW_STATIC;SFML_STATIC;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
     </ClCompile>
     <Link>
       <AdditionalLibraryDirectories>E:\Libraries\glm-0.9.9-a2-x64\glm\Release;E:\Libraries\glew-2.1.0\lib\Release\x64;E:\Libraries\Boost\boost_1_66_0\stage\lib;E:\Libraries\TGUI-x64\lib;E:\Libraries\SFML-x64\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
@@ -109,7 +109,7 @@
       <IntrinsicFunctions>true</IntrinsicFunctions>
       <SDLCheck>true</SDLCheck>
       <AdditionalIncludeDirectories>E:\Libraries\glm-0.9.9-a2\include;E:\Libraries\glew-2.1.0\include;E:\Libraries\Boost\boost_1_66_0;E:\Libraries\TGUI-x86\include;E:\Libraries\SFML-x86\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
-      <PreprocessorDefinitions>GLEW_STATIC;SFML_STATIC;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PreprocessorDefinitions>BOOST_CONFIG_SUPPRESS_OUTDATED_MESSAGE;GLEW_STATIC;SFML_STATIC;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
     </ClCompile>
     <Link>
@@ -132,7 +132,7 @@
       <IntrinsicFunctions>true</IntrinsicFunctions>
       <SDLCheck>true</SDLCheck>
       <AdditionalIncludeDirectories>E:\Libraries\glm-0.9.9-a2-x64\include;E:\Libraries\glew-2.1.0\include;E:\Libraries\Boost\boost_1_66_0;E:\Libraries\TGUI-x64\include;E:\Libraries\SFML-x64\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
-      <PreprocessorDefinitions>GLEW_STATIC;SFML_STATIC;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PreprocessorDefinitions>BOOST_CONFIG_SUPPRESS_OUTDATED_MESSAGE;GLEW_STATIC;SFML_STATIC;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
     </ClCompile>
     <Link>
@@ -190,6 +190,8 @@
     <None Include="ClassDiagram.cd" />
     <None Include="SimpleFragmentShader.fragmentshader" />
     <None Include="SimpleTransform.vertexshader" />
+    <None Include="StandardShading1.frag" />
+    <None Include="StandardShading1.vert" />
   </ItemGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
   <ImportGroup Label="ExtensionTargets">
diff --git a/Game_of_Life/Game_of_Life.vcxproj.filters b/Game_of_Life/Game_of_Life.vcxproj.filters
index 1e33606..6786ed3 100644
--- a/Game_of_Life/Game_of_Life.vcxproj.filters
+++ b/Game_of_Life/Game_of_Life.vcxproj.filters
@@ -128,5 +128,7 @@
     <None Include="ClassDiagram.cd" />
     <None Include="SimpleTransform.vertexshader" />
     <None Include="SimpleFragmentShader.fragmentshader" />
+    <None Include="StandardShading1.frag" />
+    <None Include="StandardShading1.vert" />
   </ItemGroup>
 </Project>
\ No newline at end of file
diff --git a/Game_of_Life/IntrepidLemming.cpp b/Game_of_Life/IntrepidLemming.cpp
index a5bde3c..767ef5c 100644
--- a/Game_of_Life/IntrepidLemming.cpp
+++ b/Game_of_Life/IntrepidLemming.cpp
@@ -1,4 +1,4 @@
-#include "IntrepidLemming.h"
+ï»¿#include "IntrepidLemming.h"
 
 
 IntrepidLemming::IntrepidLemming() : 
@@ -42,6 +42,7 @@ IntrepidLemming::IntrepidLemming() :
 	_handler->emplace("GUI", unique_ptr<Handler>(new GUIHandler("GUI", name, _eventQueue, _window)));
 	_handler->emplace("Render", unique_ptr<Handler>(new RenderHandler("Render", name, _eventQueue, _window)));
 	frameClock.restart();
+	glEnable(GL_DEBUG_OUTPUT);
 }
 
 void IntrepidLemming::setFrameRate(int theFrameRate) {
@@ -81,6 +82,8 @@ void IntrepidLemming::updateH() {
 }
 
 void IntrepidLemming::draw() {
+	glEnable(GL_DEBUG_OUTPUT);
+	glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);
 	_window->setActive(true);
 	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 	_window->clear();
@@ -93,6 +96,41 @@ void IntrepidLemming::draw() {
 	_window->popGLStates();
 	_window->display();
 	_window->setActive(false);
+	// check OpenGL error
+	GetFirstNMessages(5);
+}
+
+void IntrepidLemming::GetFirstNMessages(GLuint numMsgs)
+{
+	GLint maxMsgLen = 300;
+	//glGetIntegerv(GL_MAX_DEBUG_MESSAGE_LENGTH, &maxMsgLen);
+
+	std::vector<GLchar> msgData(numMsgs * maxMsgLen * 2);
+	std::vector<GLenum> sources(numMsgs * 2);
+	std::vector<GLenum> types(numMsgs * 2);
+	std::vector<GLenum> severities(numMsgs * 2);
+	std::vector<GLuint> ids(numMsgs * 2);
+	std::vector<GLsizei> lengths(numMsgs * 2);
+	GLuint numFound = glGetDebugMessageLog(1,300, &sources[0], &types[0], &ids[0], &severities[0], &lengths[0], &msgData[0]);
+	//cout << numFound << " message were found" << endl;
+	sources.resize(numFound);
+	types.resize(numFound);
+	severities.resize(numFound);
+	ids.resize(numFound);
+	lengths.resize(numFound);
+
+	std::vector<std::string> messages;
+	messages.reserve(numFound);
+
+	std::vector<GLchar>::iterator currPos = msgData.begin();
+	for (size_t msg = 0; msg < lengths.size(); ++msg)
+	{
+		messages.push_back(std::string(currPos, currPos + lengths[msg] - 1));
+		currPos = currPos + lengths[msg];
+	}
+	for (auto message: messages) {
+		cout << "OpenGL message: " << message << endl;
+	}
 }
 
 void IntrepidLemming::handleEventH(SEvent theEvent) {
diff --git a/Game_of_Life/IntrepidLemming.h b/Game_of_Life/IntrepidLemming.h
index e031c2c..eb87db0 100644
--- a/Game_of_Life/IntrepidLemming.h
+++ b/Game_of_Life/IntrepidLemming.h
@@ -52,6 +52,11 @@ private:
 	void finishThreads();
 	void init();
 	sf::CircleShape circle;
+
+
+
+
+	void GetFirstNMessages(GLuint numMsgs);
 };
 
 #endif
diff --git a/Game_of_Life/RenderHandler.cpp b/Game_of_Life/RenderHandler.cpp
index 8e03400..36bd0d6 100644
--- a/Game_of_Life/RenderHandler.cpp
+++ b/Game_of_Life/RenderHandler.cpp
@@ -1,47 +1,62 @@
 #ifndef RENDER_HANDLER_H
 #define RENDER_HANDLER_H
+
 #include "RenderHandler.h"
 
-bool RenderHandler::loadOBJ(const char * path,
-	std::vector < glm::vec3 > & out_vertices,
-	std::vector < glm::vec2 > & out_uvs,
-	std::vector < glm::vec3 > & out_normals) {
+
+class Sctype : public
+	std::ctype<char>
+{
+	mask my_table[table_size];
+public:
+	Sctype(size_t refs = 0)
+		: std::ctype<char>(&my_table[0], false, refs)
+	{
+		std::copy_n(classic_table(), table_size, my_table);
+		my_table['/'] = (mask)space;
+	}
+};
+
+bool RenderHandler::loadOBJ(const char * path) {
+	cubeVertices.clear();
+	cubeUVs.clear();
+	cubeNormals.clear();
 	std::vector< unsigned int > vertexIndices, uvIndices, normalIndices;
 	std::vector< glm::vec3 > temp_vertices;
 	std::vector< glm::vec2 > temp_uvs;
 	std::vector< glm::vec3 > temp_normals;
-	std::ifstream file("../Game_of_Life/Resources/cube_basic1.obj");
-	if (file.fail()) {
+	std::ifstream file("./../Game_of_Life/Resources/cube_basic1.obj");
+	if (!file.is_open()) {
 		cout << "Failed to open cube file" << endl;
 		return false;
 	}
-	else {
-		return true;
-	}
 	string line;
 	while (getline(file, line)) {
 		// read the first word of the line
 		if (line.substr(0,2) == "vt") {
 			glm::vec2 uv;
-			boost::filesystem::ifstream(line) >> uv.x >> uv.y;
+			std::istringstream(line.substr(3, line.length() - 3)) >> uv.x >> uv.y;
 			temp_uvs.push_back(uv);
 		}
 
 		else if (line.substr(0, 2) == "vn") {
 			glm::vec3 normal;
-			boost::filesystem::ifstream(line) >> normal.x >> normal.y >> normal.z;
+			std::istringstream(line.substr(3, line.length() - 3)) >> normal.x >> normal.y >> normal.z;
 			temp_normals.push_back(normal);
 		}
 		else if (line[0] == 'v') {
 			glm::vec3 vertex;
-			boost::filesystem::ifstream(line) >> vertex.x >> vertex.y >> vertex.z;
+			std::istringstream(line.substr(2,line.length()-2)) >> vertex.x >> vertex.y >> vertex.z;
 			temp_vertices.push_back(vertex);
 		}
 		else if (line[0] == 'f') {
 			std::string vertex1, vertex2, vertex3;
 			unsigned int vertexIndex[3], uvIndex[3], normalIndex[3];
 			int count = 0;
-			boost::filesystem::ifstream(line) >> vertexIndex[0] >> uvIndex[0] >> normalIndex[0] >> vertexIndex[1] >> uvIndex[1] >> normalIndex[1] >> vertexIndex[2] >> uvIndex[2] >> normalIndex[2];
+			std::istringstream lineStream(line.substr(2, line.length() - 2));
+			std::locale x(std::locale::classic(), new Sctype);
+			lineStream.imbue(x);
+			lineStream >> vertexIndex[0] >> uvIndex[0] >> normalIndex[0] >> vertexIndex[1] >> uvIndex[1] >> normalIndex[1] >> vertexIndex[2] >> uvIndex[2] >> normalIndex[2];
 			vertexIndices.push_back(vertexIndex[0]);
 			vertexIndices.push_back(vertexIndex[1]);
 			vertexIndices.push_back(vertexIndex[2]);
@@ -69,9 +84,9 @@ bool RenderHandler::loadOBJ(const char * path,
 		glm::vec3 normal = temp_normals[normalIndex - 1];
 
 		// Put the attributes in buffers
-		out_vertices.push_back(vertex);
-		out_uvs.push_back(uv);
-		out_normals.push_back(normal);
+		cubeVertices.push_back(vertex);
+		cubeUVs.push_back(uv);
+		cubeNormals.push_back(normal);
 	}
 	return true;
 }
@@ -176,98 +191,6 @@ GLuint RenderHandler::LoadShaders(const char * vertex_file_path, const char * fr
 						TransformedVector = TranslationMatrix * RotationMatrix * ScaleMatrix * OriginalVector;
 */
 
-static const GLfloat g_vertex_buffer_data_cube[] = {
-	-1.0f,-1.0f,-1.0f, // triangle 1 : begin
-	-1.0f,-1.0f, 1.0f,
-	-1.0f, 1.0f, 1.0f, // triangle 1 : end
-	1.0f, 1.0f,-1.0f, // triangle 2 : begin
-	-1.0f,-1.0f,-1.0f,
-	-1.0f, 1.0f,-1.0f, // triangle 2 : end
-	1.0f,-1.0f, 1.0f,
-	-1.0f,-1.0f,-1.0f,
-	1.0f,-1.0f,-1.0f,
-	1.0f, 1.0f,-1.0f,
-	1.0f,-1.0f,-1.0f,
-	-1.0f,-1.0f,-1.0f,
-	-1.0f,-1.0f,-1.0f,
-	-1.0f, 1.0f, 1.0f,
-	-1.0f, 1.0f,-1.0f,
-	1.0f,-1.0f, 1.0f,
-	-1.0f,-1.0f, 1.0f,
-	-1.0f,-1.0f,-1.0f,
-	-1.0f, 1.0f, 1.0f,
-	-1.0f,-1.0f, 1.0f,
-	1.0f,-1.0f, 1.0f,
-	1.0f, 1.0f, 1.0f,
-	1.0f,-1.0f,-1.0f,
-	1.0f, 1.0f,-1.0f,
-	1.0f,-1.0f,-1.0f,
-	1.0f, 1.0f, 1.0f,
-	1.0f,-1.0f, 1.0f,
-	1.0f, 1.0f, 1.0f,
-	1.0f, 1.0f,-1.0f,
-	-1.0f, 1.0f,-1.0f,
-	1.0f, 1.0f, 1.0f,
-	-1.0f, 1.0f,-1.0f,
-	-1.0f, 1.0f, 1.0f,
-	1.0f, 1.0f, 1.0f,
-	-1.0f, 1.0f, 1.0f,
-	1.0f,-1.0f, 1.0f
-};
-
-// One color for each vertex. They were generated randomly.
-static GLfloat g_color_buffer_data_cube[] = {
-	0.583f,  0.771f,  0.014f,
-	0.609f,  0.115f,  0.436f,
-	0.327f,  0.483f,  0.844f,
-	0.822f,  0.569f,  0.201f,
-	0.435f,  0.602f,  0.223f,
-	0.310f,  0.747f,  0.185f,
-	0.597f,  0.770f,  0.761f,
-	0.559f,  0.436f,  0.730f,
-	0.359f,  0.583f,  0.152f,
-	0.483f,  0.596f,  0.789f,
-	0.559f,  0.861f,  0.639f,
-	0.195f,  0.548f,  0.859f,
-	0.014f,  0.184f,  0.576f,
-	0.771f,  0.328f,  0.970f,
-	0.406f,  0.615f,  0.116f,
-	0.676f,  0.977f,  0.133f,
-	0.971f,  0.572f,  0.833f,
-	0.140f,  0.616f,  0.489f,
-	0.997f,  0.513f,  0.064f,
-	0.945f,  0.719f,  0.592f,
-	0.543f,  0.021f,  0.978f,
-	0.279f,  0.317f,  0.505f,
-	0.167f,  0.620f,  0.077f,
-	0.347f,  0.857f,  0.137f,
-	0.055f,  0.953f,  0.042f,
-	0.714f,  0.505f,  0.345f,
-	0.783f,  0.290f,  0.734f,
-	0.722f,  0.645f,  0.174f,
-	0.302f,  0.455f,  0.848f,
-	0.225f,  0.587f,  0.040f,
-	0.517f,  0.713f,  0.338f,
-	0.053f,  0.959f,  0.120f,
-	0.393f,  0.621f,  0.362f,
-	0.673f,  0.211f,  0.457f,
-	0.820f,  0.883f,  0.371f,
-	0.982f,  0.099f,  0.879f
-};
-
-
-static const GLfloat g_vertex_buffer_data_triangle[] = {
-	-1.0f,-1.0f,-1.0f,
-	-1.0f,-1.0f, 1.0f,
-	-1.0f, 1.0f, 1.0f
-};
-
-
-static GLfloat g_color_buffer_data_triangle[] = {
-	0.1f, 0.2f, 0.5f,
-	0.78f, 0.7f, 0.7f,
-	0.4f, 0.2f, 0.9f
-};
 
 
 RenderHandler::RenderHandler()
@@ -301,49 +224,47 @@ void RenderHandler::drawCube(float x, float y, float z) {
 									 // Send our transformation to the currently bound shader, 
 									 // in the "MVP" uniform
 	glUniformMatrix4fv(MatrixID, 1, GL_FALSE, &MVP[0][0]);
-	// Draw the cube !
+	glUniformMatrix4fv(ModelMatrixID, 1, GL_FALSE, &Model[0][0]);
+	glUniformMatrix4fv(ViewMatrixID, 1, GL_FALSE, &View[0][0]);
+	glUniform3f(MaterialColorID, x/simWidth, y/simWidth, z/simWidth);
 	glDrawArrays(GL_TRIANGLES, 0, 12 * 3); // 12*3 indices starting at 0 -> 12 triangles
 }
 
 
 void RenderHandler::drawCubes(weak_ptr<vector<vector<vector<int>>>> frame) {
+	
 	// 1st attribute buffer : vertices
 	glEnableVertexAttribArray(0);
 	glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
-	glBufferData(GL_ARRAY_BUFFER, sizeof(g_vertex_buffer_data_cube), g_vertex_buffer_data_cube, GL_STATIC_DRAW);
+	cout << "Size cubeVertices: " << cubeVertices.size() << endl;
+	glBufferData(GL_ARRAY_BUFFER, cubeVertices.size() * sizeof(glm::vec3), &cubeVertices[0][0], GL_STATIC_DRAW);
 	glVertexAttribPointer(
-		0,                  // attribute. No particular reason for 0, but must match the layout in the shader.
+		0,                  // attribute.
 		3,                  // size
 		GL_FLOAT,           // type
 		GL_FALSE,           // normalized?
 		0,                  // stride
 		(void*)0            // array buffer offset
 	);
-
-	// 2nd attribute buffer : colors
+	// 2nd attribute buffer : normals
 	glEnableVertexAttribArray(1);
-	glBindBuffer(GL_ARRAY_BUFFER, colorbuffer);
-	glBufferData(GL_ARRAY_BUFFER, sizeof(g_color_buffer_data_cube), g_color_buffer_data_cube, GL_STATIC_DRAW);
-	glVertexAttribPointer(
-		1,                                // attribute. No particular reason for 1, but must match the layout in the shader.
-		3,                                // size
-		GL_FLOAT,                         // type
-		GL_FALSE,                         // normalized?
-		0,                                // stride
-		(void*)0                          // array buffer offset
-	);
-	// 3rd attribute buffer : normals
-	glEnableVertexAttribArray(2);
 	glBindBuffer(GL_ARRAY_BUFFER, normalbuffer);
-	glBufferData(GL_ARRAY_BUFFER, sizeof(cubeNormals), &cubeNormals, GL_STATIC_DRAW);
+	cout << "Size cubeNormals: " << cubeNormals.size() << endl;
+	glBufferData(GL_ARRAY_BUFFER, cubeNormals.size() * sizeof(glm::vec3), &cubeNormals[0][0], GL_STATIC_DRAW);
 	glVertexAttribPointer(
-		2,                                // attribute
+		1,                                // attribute
 		3,                                // size
 		GL_FLOAT,                         // type
 		GL_FALSE,                         // normalized?
 		0,                                // stride
 		(void*)0                          // array buffer offset
 	);
+	glUniform3f(LightID, lightPos.x, lightPos.y, lightPos.z);
+	glUniform3f(LightColorID, 1, 1, 1);
+	glUniform1f(LightPowerID, 50);
+	glUniform1f(AmbientBrightnessID, 5);
+	glUniform1f(SpecularBrightnessID, 1);
+	cout << "STUFF PRINTING HERE" << endl;
 	int count = 0;
 	int shift = frame.lock()->size() / 2;
 	for (int x = 0 - shift; x < shift; x++) {
@@ -357,12 +278,10 @@ void RenderHandler::drawCubes(weak_ptr<vector<vector<vector<int>>>> frame) {
 			}
 		}
 	}
-	//cout << name << " cell count: " << count << endl;
 }
 
 
 void RenderHandler::draw() {
-	//cout << "DRAWING" << endl;
 	//IS NOT NECESSARY TO REBIND VAO EACH TIME, DON'T DO IT 
 	// Projection matrix : 45&deg; Field of View, 4:3 ratio, display range : 0.1 unit <-> 100 units
 	Projection = glm::perspective(glm::radians(FoV), 4.0f / 3.0f, 0.1f, 100.0f);
@@ -377,22 +296,27 @@ void RenderHandler::draw() {
 	glClearColor(0.2f, 0.5f, 0.9f, 1.0f);
 	// Use our shader
 	glUseProgram(programID);
-
+	// check OpenGL error
+	GLenum err;
+	while ((err = glGetError()) != GL_NO_ERROR) {
+		cout << "OpenGL error: " << err << endl;
+	}
 	if (!storedFrame.expired()) {
 		drawCubes(storedFrame);
 	}
+	GetFirstNMessages(5);
 	unbind();
 }
 
 
 void RenderHandler::init()
 {
-	bool res = loadOBJ("Resources/basic_cube1.obj", cubeVertices, cubeUVs, cubeNormals);
-	cout << "Result of obj loading: " << res << endl;
-	VertexArrayID;
+	bool result = loadOBJ("Resources/basic_cube1.obj");
+	cout << "Result of obj loading: " << result << endl;
 	glGenVertexArrays(1, &VertexArrayID);
 	glBindVertexArray(VertexArrayID);
 	
+
 	clock2.restart();
 	timing = 0;
 	height = _window->getSize().y;
@@ -409,21 +333,35 @@ void RenderHandler::init()
 
 	glGenBuffers(1, &vertexbuffer);
 	glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
-	glBufferData(GL_ARRAY_BUFFER, sizeof(cubeVertices), &cubeVertices, GL_DYNAMIC_DRAW);
-
-	glGenBuffers(1, &colorbuffer);
-	glBindBuffer(GL_ARRAY_BUFFER, colorbuffer);
-	glBufferData(GL_ARRAY_BUFFER, sizeof(g_color_buffer_data_cube), g_color_buffer_data_cube, GL_DYNAMIC_DRAW);
-
+	glBufferData(GL_ARRAY_BUFFER, cubeVertices.size() & sizeof(glm::vec3), &cubeVertices, GL_STATIC_DRAW);
+	
 	glGenBuffers(1, &normalbuffer);
 	glBindBuffer(GL_ARRAY_BUFFER, normalbuffer);
-	glBufferData(GL_ARRAY_BUFFER, sizeof(cubeNormals), &cubeNormals, GL_DYNAMIC_DRAW);
+	glBufferData(GL_ARRAY_BUFFER, cubeNormals.size() * sizeof(glm::vec3), &cubeNormals, GL_STATIC_DRAW);
 
 	// Create and compile our GLSL program from the shaders
-	//programID = LoadShaders("StandardShading.vertexshader", "StandardShading.fragmentshader");
-	programID = LoadShaders("SimpleTransform.vertexshader", "SimpleFragmentShader.fragmentshader");
+	programID = LoadShaders("StandardShading1.vert", "StandardShading1.frag");
 	// Get a handle for our "MVP" uniform
+	cout << "Loaded the shaders!" << endl;
 	MatrixID = glGetUniformLocation(programID, "MVP");
+	cout << "MatrixID: " << MatrixID << endl;
+	ModelMatrixID = glGetUniformLocation(programID, "M");
+	cout << "ModelMatrixID: " << ModelMatrixID << endl;
+	ViewMatrixID = glGetUniformLocation(programID, "V");
+	cout << "ViewMatrixID: " << ViewMatrixID << endl;
+	LightID = glGetUniformLocation(programID, "LightPosition_worldspace");
+	cout << "LightID: " << LightID << endl;
+	MaterialColorID = glGetUniformLocation(programID, "MaterialDiffuseColor");
+	cout << "MaterialColorID: " << MaterialColorID << endl;
+	LightColorID = glGetUniformLocation(programID, "LightColor");
+	cout << "LightColorID: " << LightColorID << endl;
+	LightPowerID = glGetUniformLocation(programID, "LightPower");
+	cout << "LightPowerID: " << LightPowerID << endl;
+	AmbientBrightnessID = glGetUniformLocation(programID, "AmbientBrightness");
+	cout << "AmbientBrightnessID: " << AmbientBrightnessID << endl;
+	SpecularBrightnessID = glGetUniformLocation(programID, "SpecularBrightness");
+	cout << "SpecularBrightnessID: " << SpecularBrightnessID << endl;
+	resetCamera();
 }
 
 
@@ -441,24 +379,43 @@ void RenderHandler::updateH() {
 	frameRotation = sf::Vector2i(0, 0);
 	frameMovement = sf::Vector3i(0, 0, 0);
 	frameZoom = 0;
-	if (clock2.getElapsedTime().asMilliseconds() > 2000) {
-		clock2.restart();
-		for (int v = 0; v < 3 * 3; v++) {
-			g_color_buffer_data_triangle[3 * v + 0] = (float)rand() / (float)(RAND_MAX / 1.0f);
-			g_color_buffer_data_triangle[3 * v + 1] = (float)rand() / (float)(RAND_MAX / 1.0f);
-			g_color_buffer_data_triangle[3 * v + 2] = (float)rand() / (float)(RAND_MAX / 1.0f);
-		}
-		for (int v = 0; v < 12 * 3; v++) {
-			g_color_buffer_data_cube[3 * v + 0] = (float)rand() / (float)(RAND_MAX / 1.0f);
-			g_color_buffer_data_cube[3 * v + 1] = (float)rand() / (float)(RAND_MAX / 1.0f);
-			g_color_buffer_data_cube[3 * v + 2] = (float)rand() / (float)(RAND_MAX / 1.0f);
-		}
-	}
 	if (closing && running) {
 		running = false;
 	}
 }
 
+void RenderHandler::GetFirstNMessages(GLuint numMsgs)
+{
+	GLint maxMsgLen = 300;
+	//glGetIntegerv(GL_MAX_DEBUG_MESSAGE_LENGTH, &maxMsgLen);
+
+	std::vector<GLchar> msgData(numMsgs * maxMsgLen * 2);
+	std::vector<GLenum> sources(numMsgs * 2);
+	std::vector<GLenum> types(numMsgs * 2);
+	std::vector<GLenum> severities(numMsgs * 2);
+	std::vector<GLuint> ids(numMsgs * 2);
+	std::vector<GLsizei> lengths(numMsgs * 2);
+	GLuint numFound = glGetDebugMessageLog(numMsgs, msgData.size(), &sources[0], &types[0], &ids[0], &severities[0], &lengths[0], &msgData[0]);
+	//cout << numFound << " message were found" << endl;
+	sources.resize(numFound);
+	types.resize(numFound);
+	severities.resize(numFound);
+	ids.resize(numFound);
+	lengths.resize(numFound);
+
+	std::vector<std::string> messages;
+	messages.reserve(numFound);
+
+	std::vector<GLchar>::iterator currPos = msgData.begin();
+	for (size_t msg = 0; msg < lengths.size(); ++msg)
+	{
+		messages.push_back(std::string(currPos, currPos + lengths[msg] - 1));
+		currPos = currPos + lengths[msg];
+	}
+	for (auto message : messages) {
+		cout << "OpenGL message: " << message << endl;
+	}
+}
 
 void RenderHandler::handleEventH(SEvent theEvent) {
 	if (theEvent._sType == WINDOW_RESIZE) {
@@ -480,6 +437,7 @@ void RenderHandler::handleEventH(SEvent theEvent) {
 	else if (theEvent._sType == FRAME) {
 		//updateCells(theEvent._frame);
 		storedFrame = theEvent._frame;
+		simWidth = storedFrame.lock()->size();
 		//cout << "RECEIVED FRAME" << endl;
 	}
 }
diff --git a/Game_of_Life/RenderHandler.h b/Game_of_Life/RenderHandler.h
index 606712a..4ee2565 100644
--- a/Game_of_Life/RenderHandler.h
+++ b/Game_of_Life/RenderHandler.h
@@ -63,17 +63,17 @@ private:
 	//void updateCells(vector<vector<vector<int>*>*>* frame);
 	weak_ptr<vector<vector<vector<int>>>> storedFrame;
 	GLuint LoadShaders(const char * vertex_file_path, const char * fragment_file_path);
-	bool loadOBJ(const char * path, std::vector < glm::vec3 > & out_vertices, std::vector < glm::vec2 > & out_uvs, std::vector < glm::vec3 > & out_normals);
+	bool loadOBJ(const char * path);
 
 	void drawCube(float x, float y, float z);
 	void drawCubes(weak_ptr<vector<vector<vector<int>>>> frame);
 
 	void resetCamera();
-
 	GLuint VertexArrayID;
 	// This will identify our vertex buffer
-	GLuint vertexbuffer, programID, colorbuffer, normalbuffer;
-	GLuint MatrixID;
+	GLuint vertexbuffer, programID, colorbuffer, normalbuffer, uvBuffer;
+	GLuint MatrixID, textureID, textureSamplerID, MaterialColorID, LightColorID, LightPowerID;
+	GLuint ViewMatrixID, ModelMatrixID, LightID, SpecularBrightnessID, AmbientBrightnessID;
 	int height;
 	int width;
 	glm::mat4 Projection, View, Model, Scale, MVP;
@@ -81,9 +81,11 @@ private:
 	sf::Vector2i frameRotation = sf::Vector2i(0, 0);
 	int frameZoom = 0;
 
+	int simWidth;
 
 	// position
-	glm::vec3 position = glm::vec3(0, 0, 70);
+	glm::vec3 position = glm::vec3(0, 0, 0);
+	glm::vec3 lightPos = glm::vec3(0, simWidth, 0);
 	// horizontal angle : toward -Z
 	float horizontalAngle = 3.14f;
 	// vertical angle : 0, look at the horizon
@@ -95,7 +97,7 @@ private:
 	glm::vec3 up, right, direction;
 
 	float speedZoom = 4;
-	float speedMovement = 0.01f; // units / second
+	float speedMovement = 0.001f; // units / second
 	float mouseSpeed = 0.0005f;
 	sf::Clock clock, clock2;
 	int timing;
@@ -106,6 +108,16 @@ private:
 	std::vector< glm::vec3 > cubeVertices;
 	std::vector< glm::vec2 > cubeUVs;
 	std::vector< glm::vec3 > cubeNormals; // Won't be used at the moment.
+
+	sf::Texture texture;
+
+
+
+
+
+
+
+	void GetFirstNMessages(GLuint numMsgs);
 };
 
 #endif
\ No newline at end of file
diff --git a/Game_of_Life/StandardShading.fragmentshader b/Game_of_Life/StandardShading1.frag
similarity index 80%
rename from Game_of_Life/StandardShading.fragmentshader
rename to Game_of_Life/StandardShading1.frag
index 9c4e0c9..0c0e585 100644
--- a/Game_of_Life/StandardShading.fragmentshader
+++ b/Game_of_Life/StandardShading1.frag
@@ -1,31 +1,26 @@
 #version 330 core
 
 // Interpolated values from the vertex shaders
-in vec2 UV;
 in vec3 Position_worldspace;
 in vec3 Normal_cameraspace;
 in vec3 EyeDirection_cameraspace;
 in vec3 LightDirection_cameraspace;
 
-// Ouput data
+// Output data
 out vec3 color;
 
 // Values that stay constant for the whole mesh.
-uniform sampler2D myTextureSampler;
-uniform mat4 MV;
 uniform vec3 LightPosition_worldspace;
-
+uniform vec3 MaterialDiffuseColor;
+uniform vec3 LightColor;
+uniform float LightPower;
+uniform float AmbientBrightness;
+uniform float SpecularBrightness;
 void main(){
-
-	// Light emission properties
-	// You probably want to put them as uniforms
-	vec3 LightColor = vec3(1,1,1);
-	float LightPower = 50.0f;
 	
 	// Material properties
-	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
-	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
-	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);
+	vec3 MaterialAmbientColor = vec3(AmbientBrightness,AmbientBrightness,AmbientBrightness) * MaterialDiffuseColor;
+	vec3 MaterialSpecularColor = vec3(SpecularBrightness,SpecularBrightness,SpecularBrightness);
 
 	// Distance to the light
 	float distance = length( LightPosition_worldspace - Position_worldspace );
diff --git a/Game_of_Life/StandardShading.vertexshader b/Game_of_Life/StandardShading1.vert
similarity index 93%
rename from Game_of_Life/StandardShading.vertexshader
rename to Game_of_Life/StandardShading1.vert
index 02aa396..723139d 100644
--- a/Game_of_Life/StandardShading.vertexshader
+++ b/Game_of_Life/StandardShading1.vert
@@ -2,11 +2,9 @@
 
 // Input vertex data, different for all executions of this shader.
 layout(location = 0) in vec3 vertexPosition_modelspace;
-layout(location = 1) in vec3 vertexcolor;
-layout(location = 2) in vec3 vertexNormal_modelspace;
+layout(location = 1) in vec3 vertexNormal_modelspace;
 
 // Output data ; will be interpolated for each fragment.
-out vec2 UV;
 out vec3 Position_worldspace;
 out vec3 Normal_cameraspace;
 out vec3 EyeDirection_cameraspace;
diff --git a/Game_of_Life/TextureFragmentShader.fragmentshader b/Game_of_Life/TextureFragmentShader.fragmentshader
new file mode 100644
index 0000000..929692f
--- /dev/null
+++ b/Game_of_Life/TextureFragmentShader.fragmentshader
@@ -0,0 +1,16 @@
+#version 330 core
+
+// Interpolated values from the vertex shaders
+in vec2 UV;
+
+// Ouput data
+out vec3 color;
+
+// Values that stay constant for the whole mesh.
+uniform sampler2D myTextureSampler;
+
+void main(){
+
+	// Output color = color of the texture at the specified UV
+	color = texture( myTextureSampler, UV ).rgb;
+}
\ No newline at end of file
diff --git a/Game_of_Life/TransformVertexShader.vertexshader b/Game_of_Life/TransformVertexShader.vertexshader
new file mode 100644
index 0000000..da9110d
--- /dev/null
+++ b/Game_of_Life/TransformVertexShader.vertexshader
@@ -0,0 +1,21 @@
+#version 330 core
+
+// Input vertex data, different for all executions of this shader.
+layout(location = 0) in vec3 vertexPosition_modelspace;
+layout(location = 1) in vec2 vertexUV;
+
+// Output data ; will be interpolated for each fragment.
+out vec2 UV;
+
+// Values that stay constant for the whole mesh.
+uniform mat4 MVP;
+
+void main(){
+
+	// Output position of the vertex, in clip space : MVP * position
+	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
+	
+	// UV of the vertex. No special space for this one.
+	UV = vertexUV;
+}
+
